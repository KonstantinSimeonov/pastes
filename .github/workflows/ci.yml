name: CI

on: push

jobs:
  tsc:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-node

      - name: Generate prisma client
        run: npx prisma generate

      - name: Typecheck
        run: npm run tsc

  prettier:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-node

      - name: Format check
        run: npm run format:check

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-node

      - name: Lint
        run: npm run lint

  test-migrations:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        ports:
          - 8000:5432
        env:
          POSTGRES_PASSWORD: "123gosho"
          POSTGRES_DB: "pastes"
          POSTGRES_USER: "kon"
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-node

      - name: Run migrations
        run: npx prisma migrate reset --force

  push-to-ecr:
    runs-on: ubuntu-latest
    environment: production
    needs: [test-migrations, lint, tsc, prettier]
    if: success() && github.ref == 'refs/heads/master'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Build, tag, push to ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          IMAGE_TAG: latest
        run: |
          aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
          docker build --build-arg SENTRY_AUTH_TOKEN -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-migrations:
    runs-on: ubuntu-latest
    environment: production
    needs: [push-to-ecr]
    if: success() && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-node

      - name: Deploy migrations
        env:
          DB_URL: ${{ secrets.DB_URL }}
        run: |
          echo DB_URL=$DB_URL > .env
          npx prisma migrate deploy

  restart-ecs-task:
    runs-on: ubuntu-latest
    needs: [deploy-migrations]
    if: success() && github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Install jq
        run: |
          sudo apt update
          sudo apt install -y jq

      - name: Restart task
        env:
          AWS_CLUSTER: ${{ secrets.AWS_CLUSTER }}
        run: |
          aws ecs list-tasks --cluster $AWS_CLUSTER \
          | jq -r '.taskArns[] | split("/")[2]' \
          | xargs -n1 aws ecs stop-task --no-cli-pager --cluster $AWS_CLUSTER --task
